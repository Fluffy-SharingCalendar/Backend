# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "main" ]

permissions:  
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Gradle Cache
      uses: actions/cache@v4.0.0
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-

    # 프로젝트 저장소에 업로드하면 안되는 설정 파일 생성
    - name: Make application.properties
      run: |
        mkdir scripts
        cd ./scripts
        echo "$DEPLOY_SH" > ./deploy.sh
        cd ..
        cd ./src/main/resources
        touch ./application.properties
        echo "$APPLICATION" > ./application.properties
      env:
        APPLICATION: ${{ secrets.APPLICATION }}
        DEPLOY_SH: ${{ secrets.DEPLOY_SH }}
      shell: bash

    - name: Gradle 권한 부여
      run: chmod +x gradlew 

    - name: Gradle 빌드
      run: ./gradlew bootjar

    - name: zip file 생성
      run: |
        mkdir deploy
        cp ./docker/docker-compose.blue.yml ./deploy/
        cp ./docker/docker-compose.green.yml ./deploy/
        cp ./appspec.yml ./deploy/
        cp ./docker/Dockerfile ./deploy/
        cp ./scripts/*.sh ./deploy/
        cp ./build/libs/*.jar ./deploy/
        zip -r -qq -j ./spring-build.zip ./deploy

    - name: AWS 연결
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: S3에 프로젝트 업로드
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./spring-build.zip s3://fluffy-builds-bucket

    - name: ec2에 Code Deploy 배포 요청
      run: aws deploy create-deployment 
        --application-name fluffy-cicd
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name fluffy-instance
        --s3-location bucket=fluffy-builds-bucket,bundleType=zip,key=spring-build.zip

    # 빌드 실패 시 PR 닫기 및 변경 요청 추가
    - name: Close PR, if build fails
      if: ${{ failure() && github.event_name == 'pull_request' }} 
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.TOKEN }}
        script: | 
          const pull_number = context.payload.pull_request.number;
          const updated_title = `[BUILD FAIL] ${context.payload.pull_request.title}`;
          await github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pull_number,
            body: '빌드에 실패했습니다.😥 PR을 닫습니다.',
            event: 'REQUEST_CHANGES'
          });
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pull_number,
            title: updated_title,
            state: 'closed'
          });

    - name: Comment on PR, If test passes
      if: ${{ success() && github.event_name == 'pull_request' }} 
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const pull_number = context.payload.pull_request.number;
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pull_number,
            body: '빌드에 성공했습니다.😊'
          });
